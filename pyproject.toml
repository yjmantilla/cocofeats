[build-system]
requires = ["hatchling>=1.25", "hatch-vcs>=0.4"]
build-backend = "hatchling.build"

[project]
name = "cocofeats"
dynamic = ["version"]
description = "A slurm friendly MEEG feature extraction package leveraging bids-like data organization and DAG processing."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
  { name = "Yorguin-Jose Mantilla-Ramos", email = "yjmantilla@gmail.com" },
]
keywords = ["meeg", "feature","extraction", "bids", "meg", "eeg"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]

dependencies = ["mne",
"pandas",
"structlog",
"pyyaml",
"mne-bids",
"pybv >= 0.7.3",
]

[tool.hatch.metadata]
allow-direct-references = true

[project.urls]
Homepage = "https://github.com/yjmantilla/cocofeats"
Documentation = "https://yjmantilla.github.io/cocofeats/"
Repository = "https://github.com/yjmantilla/cocofeats"
Issues = "https://github.com/yjmantilla/cocofeats/issues"

[project.optional-dependencies]
dev = [
  "black>=24.3",
  "ruff>=0.5",
  "mypy>=1.10",
  "pre-commit>=3.7",
  "build>=1.2",
]

test = [
  "pytest>=8.2",
  "pytest-cov>=5.0",
]

docs = [
  "sphinx>=7.3",
  "furo>=2024.1.29",
  "myst-parser>=2.0",
  "sphinx-autodoc-typehints>=2.1",
  "sphinx-gallery>=0.16",
  "matplotlib>=3.7",
]

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    "src/cocofeats/_version.py",
]

[tool.ruff.lint]
select = [
  "E", "W",      # pycodestyle
  "F",            # pyflakes
  "I",            # isort
  "B",            # flake8-bugbear
  "UP",           # pyupgrade
  "C4",           # flake8-comprehensions
  "PT",           # flake8-pytest-style
  "Q",            # flake8-quotes
  "RUF",
]
ignore = ["E501"]

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true
ignore_missing_imports = true
no_implicit_optional = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --cov=cocofeats --cov-report=term-missing"
testpaths = ["tests"]

[tool.hatch.build.targets.sdist]
include = [
  "src", 
  "README.md", 
  "LICENSE", 
  "pyproject.toml",
  "src/cocofeats/py.typed"
]

[tool.hatch.build.targets.wheel]
packages = ["src/cocofeats"]

# --- VCS-based versioning (hatch-vcs) ---
[tool.hatch.version]
source = "vcs"

# Write the resolved version into a module at build time so consumers can import __version__ if desired
[tool.hatch.build.hooks.vcs]
version-file = "src/cocofeats/_version.py"

# Optional: tweak how local (non-tag) versions are rendered. This keeps the commit hash and date
# See setuptools-scm docs for options: node-and-date (default), node-and-timestamp, no-local-version, etc.
[tool.hatch.version.raw-options]
local_scheme = "node-and-date"
